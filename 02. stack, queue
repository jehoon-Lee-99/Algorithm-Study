-stack
스택은 후입선출(LIFO, Last-In-First-Out) 구조이다.

같은 구조와 크기의 자료를 정해진 방향으로만 쌓을수 있고,
top을 통해서만 접근할 수 있다.

▶ 스택의 활용 예시
웹 브라우저 방문기록 (뒤로 가기) : 가장 나중에 열린 페이지부터 다시 보여준다.
역순 문자열 만들기 : 가장 나중에 입력된 문자부터 출력한다.
실행 취소 (undo) : 가장 나중에 실행된 것부터 실행을 취소한다.
후위 표기법 계산
수식의 괄호 검사 (연산자 우선순위 표현을 위한 괄호 검사)


-queue
큐는 선입선출(FIFO, First in first out) 구조이다.

큐는 한쪽 끝에서 삽입 작업이, 다른 쪽 끝에서 삭제 작업이 양쪽으로 이루어진다.
이때 삭제연산만 수행되는 곳을 프론트(front), 삽입연산만 이루어지는 곳을 리어(rear)로 정하여
각각의 연산작업만 수행된다. 이때, 큐의 리어에서 이루어지는 삽입연산을 인큐(enQueue)
프론트에서 이루어지는 삭제연산을 디큐(dnQueue)라고 부른다.

큐는 주로 데이터가 입력된 시간 순서대로 처리해야 할 필요가 있는 상황에 이용한다.

▶ 큐의 활용 예시
우선순위가 같은 작업 예약 (프린터의 인쇄 대기열)
은행 업무
콜센터 고객 대기시간
프로세스 관리
너비 우선 탐색(BFS, Breadth-First Search) 구현
캐시(Cache) 구현

출처: https://devuna.tistory.com/22 [튜나 개발일기]

#######################################################################

●●●●● 프로그래머스) 기능개발 문제 ●●●●●
https://programmers.co.kr/learn/courses/30/lessons/42586

import math

def solution(progresses, speeds):
    answer = []
    day = []
    p = 0
    for i in range(len(progresses)):
        day.append(math.ceil((100 - progresses[i]) / speeds[i]))

    for idx in range(len(progresses)):
        if day[p] < day[idx]:
            answer.append(idx-p)
            p = idx
    answer.append(len(progresses)-p)

    return answer
    
이전의 기능개발이 끝나지 않으면 배포가 불가능한 구조의 기능개발에서
한번의 배포에서 몇개의 기능개발이 적용되는지 계산하는 문제이다.
FIFO와 유사하나, 남은 개발 일자를 계산해서 푸는 방식을 사용하였다.

※위에서 math 함수를 사용하지 않으려면,
(100-p)/s 의 형태를 -((p-100)//s) 로 사용하면 된다.
여기서 // 연산자는 나누기 연산 후 소수점 이하의 수를 버리고, 정수 부분의 수만 구한다 (내림)
이는 math.ceil을 사용한것과 같은 효과이다.
       
       ** : 거듭제곱
       %  : 나머지 반환

빈 리스트에 값을 추가할때는 인덱스 대신 append를 활용하자

zip() 함수를 사용하면 마치 옷의 지퍼를 올리는 것 처럼 양 측에 있는 데이터를 짝을 지어준다.
