### 백준 1149번 (RGB)
부분합 최소 구하기

n = int(input())
p = []
for i in range(n):
    p.append(list(map(int, input().split())))
for i in range(1, len(p)):
    p[i][0] = min(p[i - 1][1], p[i - 1][2]) + p[i][0]
    p[i][1] = min(p[i - 1][0], p[i - 1][2]) + p[i][1]
    p[i][2] = min(p[i - 1][0], p[i - 1][1]) + p[i][2]
print(min(p[n - 1][0], p[n - 1][1], p[n - 1][2]))


### 백준 2178번
BFS를 활용한 풀이, 예시로 나온 입력은 모두 정상출력 되지만 제출시 런타임에러 발생

n,m = map(int,input().split())
p = []
for i in range(n):
    p.append(int(input()))
M = []
for i in range(n):
    M.append(list(map(int,str(p[i]))))
dx, dy = [1,-1,0,0],[0,0,1,-1]

from collections import deque
queue = deque([]) #시작점
queue.append([0,0])

while queue:
    x,y = queue.popleft()
    for i in range(4):  # BFS 탐색
        nx,ny = x+dx[i],y+dy[i]
        if 0<=nx<n and 0<=ny<m:     # 지도 안으로 제한
            if M[nx][ny] == 1:
                M[nx][ny] = M[x][y] +1
                queue.append([nx,ny])
                if nx == n-1 and ny == m-1:   # 목적지에 도달하면 종료               
                    break
        if x==0 and y==0 and i==3:  # 다시 0,0으로 돌아가지 않게 0으로 
            M[0][0] = 0

print(M[n-1][m-1])


### 옳은 풀이
n, m = map(int, input().split())
s = []
queue = []
dx = [1, -1, 0, 0]
dy = [0, 0, -1, 1]
for i in range(n):
    s.append(list(input()))
queue = [[0, 0]]
s[0][0] = 1
while queue:
    a, b = queue[0][0], queue[0][1]
    del queue[0]
    for i in range(4):
        x = a + dx[i]
        y = b + dy[i]
        if 0 <= x < n and 0 <= y < m and s[x][y] == "1":
            queue.append([x, y])
            s[x][y] = s[a][b] + 1
print(s[n - 1][m - 1])


### 백준 2667번

def bfs():
    for j in range(4):
        x,y = where1[0]
        where1.remove([x,y]) #리스트에서 삭제
        nx, ny = x+dx[j], y+dy[j]
        if [nx,ny] in where1: #인접한 집이 있을경우
            bfs()
        else:
            counter += 1
            house.append([])
            bfs()


### 백준 1697번
bfs를 적용한 숨바꼭질 문제, 갈수 있는 세개의 선택지를 bfs를 활용해서 풀는 문제이다
생각을 할 수 있으면 쉬운문제지만 bfs를 활용해서 푸는 발상이 어려웠다.

from collections import deque
Max = 100000
dist = [0] * (Max+1)

def bfs():
    queue = deque()
    queue.append(g)
    while queue:
        x = queue.popleft()
        if x == h:
            print(dist[x])
            break
        for nx in (x-1, x+1, 2*x):
            if 0<=nx<=Max and not dist[nx]:  #10만 이하, 방문X
                dist[nx] = dist[x] + 1    #방문했던 위치에 몇번째 실행만에 도착했는지 기록
                queue.append(nx)

g,h = map(int,input().split())
bfs()


### 백준 1987번 알파벳
이미 방문했던 경로를 방지할 수 있는 수단이 필요
2차원의 리스트를 사용하기 보다는 최고기록을 기록하고, 알파벳 26개에 대한 체크를 하는것이 빠르다

r,c = map(int,input().split())
MAP = [list(input()) for i in range(r)]
answer = 1
dx, dy = [0,0,1,-1],[1,-1,0,-0]

def DFS(x, y, ans):
    global answer

    answer = max(ans, answer)

    # 좌우상하 다 확인한다
    for i in range(4):
        nx,ny = x + dx[i],y + dy[i]
        
        # index 벗어나지 않는지 체크하고, 새로운 칸이 중복되는 알파벳인지 체크한다
        if ((0 <= nx < R) and (0 <= ny < C)) and (board[nx][ny] not in passed):
            passed.append(board[nx][ny])
            DFS(nx, ny, ans+1)
            passed.remove(board[nx][ny])

DFS(0, 0, answer)
print(answer)
