파이썬은 대응 관계를 나타낼 수 있는 자료형을 가지고 있다.
이를 연관 배열(Associative array) 또는 해시(Hash)라고 한다.

파이썬에서는 이러한 자료형을 딕셔너리(Dictionary)라고 하는데,
즉 "people"이라는 단어에 "사람", "baseball"이라는 단어에 "야구"라는 뜻이 부합되듯이 딕셔너리는 Key와 Value를 한 쌍으로 갖는 자료형이다.
예컨대 Key가 "baseball"이라면 Value는 "야구"가 될 것이다.

딕셔너리는 리스트나 튜플처럼 순차적으로(sequential) 해당 요솟값을 구하지 않고 Key를 통해 Value를 얻는다. 이것이 바로 딕셔너리의 가장 큰 특징이다. 
baseball이라는 단어의 뜻을 찾기 위해 사전의 내용을 순차적으로 모두 검색하는 것이 아니라 baseball이라는 단어가 있는 곳만 펼쳐 보는 것이다.
<참고: 점프투파이썬>

해시함수는 해시값에서 원본을 찾기 어려움

hash(): 각 값에 대한 고유한 정수를 반환

#####################################################

●●●●●프로그래머스) 완주하지 못한 선수●●●●●
수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.
마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.

def solution(participant, completion): 
  answer = '' 
  temp = 0 
  dic = {}
  
  for p in participant:
    dic[hash(p)] = p
    temp += int(hash(part))
  for com in completion:
    temp -= hash(com)
  answer = dic[temp]
  return answer
  
유니크한 해시 값을 이용하여 문제를 풀이하는 방법, 문제에서의 조건이 완주하지 못한사람은 1명이라고 하였기에 가능한 풀이이다.
다른 풀이법은 Counter를 이용하는 것인데

import collections

def solution(participant, completion):
    answer = collections.Counter(participant) - collections.Counter(completion)
    return list(answer.keys())[0]
    
collection의 counter는 주어진 자료의 개수를 세어준다.
입력받은 참가자를 하나의 자료(단어)처럼 취급하고, 완주자를 빼주면 한명의 사람만 남게된다.
이때, counter는 개수가 많은 자료를 먼저 반환하는 most_return이라는 매서드가 있기 때문에,
list(-)[0]의 방법으로 반환이 가능하다. (마찬가지로 완주하지 못한 선수가 한명이기 때문에 가능)
