■ 탐색
많은 양의 데이터 중에서 원하는 데이터를 찾는 과정
그래프 탐색 알고리즘: DFS, BFS

■ 재귀함수 (Recursive Function)
자기자신을 다시 호출하는 함수
종료조건을 반드시 명시해야함 (무한 호출 방지)

모든 재귀함수는 반복문을 이용하여 동일하게 구현 가능 -> 재귀함수가 유리한 경우도 불리한 경우도 있음
컴퓨터가 함수를 연속적으로 호출하면 메모리에 스택 프레임이 쌓임 -> 스택 라이브러리 대신 재귀함수를 이용하는 경우 多

■ 유클리드 호제법 (최대공약수 계산)
두 개의 자연수에 대한 최대 공약수를 구하는 알고리즘
두 자연수 A, B에 대해 A를 B로 나머지를 R이라고 할 때,
A와 B의 최대공약수는 B와 R의 최대공약수가 같다 (점화식)

def gcd(a,b):
  if a % b == 0:
    return b
  else:
    return gcd(b, a%b)


■ DFS (Depth-First Search, 깊이 우선 탐색)
스택 자료구조(혹은 재귀함수)를 이용
1. 탐색 시작 노드를 스택에 삽입하고 방문처리
2. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있다면, 노드를 스택에 넣고 방문처리
   방문하지 않은 인접 노드가 없다면, 최상단 노드를 꺼냄
3. 더 이상 2번 과정을 수행할 수 없을 때까지 반복

def dfs(graph, v, visited):
  visited[v] = True    # 현재노드를 방문처리
  print(v, end=' ')
  for i in grapgh[v]:    # 현재 노드와 연결된 다른 노드를 방문
    if not visited[i]:
      dfs(graph, i, visited)
      
# 각 노드의 연결정보
grapgh = [[],[2,3,8],[1,7],[1,4,5],[3,5],[3,4],[7],[2,6,8],[1,7]]

# 각 노드가 방문된 정보
visited = [False] * 9

# 정의된 DFS 함수 호출
dfs(grapgh, 1, visited)
